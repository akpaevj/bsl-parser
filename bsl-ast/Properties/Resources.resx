<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BinaryExpressionExpected" xml:space="preserve">
    <value>Ожидается бинарное выражение</value>
  </data>
  <data name="CloseBracketExpected" xml:space="preserve">
    <value>Ожидается закрывающая скобка - ]</value>
  </data>
  <data name="CloseParentExpected" xml:space="preserve">
    <value>Ожидается закрывающая скобка - )</value>
  </data>
  <data name="CommaExpected" xml:space="preserve">
    <value>Ожидается запятая - ,</value>
  </data>
  <data name="DoExpected" xml:space="preserve">
    <value>Ожидается ключевое слово "Цикл"</value>
  </data>
  <data name="EndDoExpected" xml:space="preserve">
    <value>Ожидается ключевое слово "КонецЦикла"</value>
  </data>
  <data name="EndFunctionTokenExpected" xml:space="preserve">
    <value>Ожидается ключевое слово "КонецФункции"</value>
  </data>
  <data name="EndIfExpected" xml:space="preserve">
    <value>Ожидается ключевое слово "КонецЕсли"</value>
  </data>
  <data name="EndMarkExpected" xml:space="preserve">
    <value>Ожидается символ конца метки - :</value>
  </data>
  <data name="EndProcedureTokenExpected" xml:space="preserve">
    <value>Ожидается ключевое слово "КонецПроцедуры"</value>
  </data>
  <data name="EndRegionExpected" xml:space="preserve">
    <value>Ожидается "#КонецОбласти"</value>
  </data>
  <data name="EndTryExpected" xml:space="preserve">
    <value>Ожидается ключевое слово "КонецПопытки"</value>
  </data>
  <data name="EqualExpected" xml:space="preserve">
    <value>Ожидается оператор присваивания - =</value>
  </data>
  <data name="ExceptExpected" xml:space="preserve">
    <value>Ожидается ключевое слово "Исключение"</value>
  </data>
  <data name="ExpressionExpected" xml:space="preserve">
    <value>Ожидается выражение</value>
  </data>
  <data name="IdentifierExpected" xml:space="preserve">
    <value>Ожидается идентификатор</value>
  </data>
  <data name="InExpected" xml:space="preserve">
    <value>Ожидается ключевое слово "Из"</value>
  </data>
  <data name="InvalidDateLiteralFormat" xml:space="preserve">
    <value>Неправильный формат литерала даты</value>
  </data>
  <data name="InvalidIdentifier" xml:space="preserve">
    <value>Именем переменной, функции или процедуры должна быть любая последовательность букв, цифр и знаков подчеркивания, начинающаяся с буквы или знака подчеркивания</value>
  </data>
  <data name="InvalidNumberLiteralFormat" xml:space="preserve">
    <value>Неправильный формат числа</value>
  </data>
  <data name="InvalidStringLiteralFormat" xml:space="preserve">
    <value>Неправильный формат строки</value>
  </data>
  <data name="LiteralExpressionExpected" xml:space="preserve">
    <value>Ожидается константа примитивного типа (Число, Строка, Дата, Булево, Неопределено, NULL)</value>
  </data>
  <data name="MarkExpected" xml:space="preserve">
    <value>Ожидается символ начала метки - ~</value>
  </data>
  <data name="MethodDefinitionExpected" xml:space="preserve">
    <value>Ожидается определение процедуры или функции</value>
  </data>
  <data name="NewObjectArgumentsExpected" xml:space="preserve">
    <value>Для функциональной формы создания нового объекта обязательно указание тип объекта в аргументах оператора</value>
  </data>
  <data name="OpenParentExpected" xml:space="preserve">
    <value>Ожидается открывающая скобка - (</value>
  </data>
  <data name="SemicolonExpected" xml:space="preserve">
    <value>Ожидается точка с запятой - ;</value>
  </data>
  <data name="StatementExpected" xml:space="preserve">
    <value>Ожидается инструкция</value>
  </data>
  <data name="ThenExpected" xml:space="preserve">
    <value>Ожидается ключевое слово "Тогда"</value>
  </data>
  <data name="ToExpected" xml:space="preserve">
    <value>Ожидается ключевое слово "По"</value>
  </data>
  <data name="UnexpectedAwaitOperator" xml:space="preserve">
    <value>Ключевое слово "Ждать" может использоваться только в методах с модификатором "Асинх"</value>
  </data>
  <data name="UnexpectedEndRegion" xml:space="preserve">
    <value>Не найдено начало области</value>
  </data>
  <data name="UnexpectedPreprocessorDirective" xml:space="preserve">
    <value>Неизвестная инструкция препроцессора</value>
  </data>
  <data name="UnexpectedPreprocessorExpression" xml:space="preserve">
    <value>Неожиданный оператор условия препроцессора</value>
  </data>
  <data name="UnexpectedVariableDeclaration" xml:space="preserve">
    <value>Объявления переменных должны быть расположены в начале модуля, процедуры или функции</value>
  </data>
  <data name="UnknownErrorCode" xml:space="preserve">
    <value>Неизвестный код ошибки ({0})</value>
  </data>
</root>